# プッシュしたらpubディレクトリ内のmdファイルをhtmlとpdfに変換する。
# 変換したファイルはgithub pagesで公開する。
name: Convert .md into .html .pdf
on: [push]


jobs:
  check-condition:
    runs-on: ubuntu-latest
    outputs:
      my_output: ${{ steps.set_outputs.outputs.my_output }}
    steps:
      - name: Set output based on commit message
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        # Bash スクリプトで直接contains関数は使えないため、envを通して渡してgrepでチェック
        id: set_outputs
        run: |
          echo "Commit message: $COMMIT_MESSAGE"
          if echo "$COMMIT_MESSAGE" | grep -q "publish"; then
            echo "my_output=true" >> $GITHUB_ENV
            echo "my_output=true" >> $GITHUB_OUTPUT
          else
            echo "my_output=false" >> $GITHUB_ENV
            echo "my_output=false" >> $GITHUB_OUTPUT
          fi
          echo "Commit message: $my_output"

      - name: Use environment variable
        run: echo "The value of my_output is ${{ env.my_output }} !!!"

  publish:
    needs: check-condition
    # if: ${{ needs.check-condition.outputs.my_output  == 'true'}}
    runs-on: ubuntu-latest
    steps:

      - name: Use environment variable
        run: echo "The value of my_output is $ {{ needs.check-condition.outputs.my_output }}"

      # チェックアウトリポジトリ内のファイルが利用できるようになる。
      - uses: actions/checkout@v4

      # imagesフォルダを指定した出力フォルダにコピー
      # この出力フォルダがあとでgithub pagesのルートになる。
      - name: Copy images from pub/*/images to output2
        run: |
          while IFS= read -r folder; do
            base_folder=$(basename $(dirname "$folder"))
            mkdir -p "output2/$base_folder/images"
            cp -r "$folder"/* "output2/$base_folder/images/"
          done < <(find pub -type d -name images)

      # marp-cliの処理にKoharaKazuyaさんが公開しているActionを利用
      # この部分も自分で組みたい
      # 設定ファイル.marprc-ci.ymlでディレクトリを指定している
      - name: Convert .md into .html .pdf
        uses: KoharaKazuya/marp-cli-action@v2
        with:
          config-file: ./.marprc-ci.yml

      # 成果物を指定した出力フォルダに保存する
      - name: Save outputs
        uses: actions/upload-artifact@v4
        with:
          name: marp_output
          path: ./output2

      # 生成したファイルのリストをindex.htmlにまとめる
      - name: make index and line notify
        id: generate_file_urls
        env:
          LINE_TOKEN: ${{ secrets.SECRET_LINE_NOTIFY_API_TOKEN }} # LINE NotifyのアクセストークンをGitHub Secretsから取得
        run: |
          REPOSITORY_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          PAGE_URL="https://${{github.repository_owner}}.github.io/${REPOSITORY_NAME}/"
          COMMIT_DATE=$(git log -1 --format=%cd --date=format:"%m/%d(%a) %H:%M:%S")


          HTML_FILES=$(find ./output2 \( -name "*.html" \) -type f | sort | sed 's|./output2/||g' | while read file; do echo "<div class='docs_link'><a href=\"${PAGE_URL}${file// /%20}\">${file// /%20}</a></div> "; done)
          PDF_FILES=$(find ./output2 \( -name "*.pdf" \) -type f | sort | sed 's|./output2/||g' | while read file; do echo "<div class='docs_link'><a href=\"${PAGE_URL}${file// /%20}\">${file// /%20}</a></div> "; done)
          FILES_WITH_URLS=$(echo "<div>Commit message: 「${{ github.event.head_commit.message }}」</div><div>Commit date:$COMMIT_DATE</div><h1>HTMLファイル一覧</h1><div>$HTML_FILES</div><h1>PDFファイル一覧</h1><div>$PDF_FILES</div>")

          # FILES_WITH_URLS変数の内容を一時ファイルに書き出す
          echo "$FILES_WITH_URLS" > temp_file_for_replacement.txt

          # Perlを使用して、[[REPLACE_ME]]を一時ファイルの内容で置き換える
          perl -i -pe 'BEGIN{local $/; open my $fh, "<", "temp_file_for_replacement.txt"; $replacement = join("", <$fh>); close $fh;} s#\[\[REPLACE_ME\]\]#$replacement#es' ./index.html
          mkdir ./output2/m2d47dtw3io3/
          cp ./index.html ./output2/m2d47dtw3io3/index.html
          cp ./favicon.ico ./output2/m2d47dtw3io3/favicon.ico

          # 一時ファイルを削除
          rm temp_file_for_replacement.txt

          #Line通知用のメッセージ作成
          MESSAGE=$(echo -e " \n ◆以下のファイルがデプロイされました。\n Commit message: 「${{ github.event.head_commit.message }}」\n $COMMIT_DATE \n\n 下記URLからご確認下さい。 \n ${PAGE_URL}/m2d47dtw3io3/")

          # cURLでLine通知をリクエスト
          curl -X POST https://notify-api.line.me/api/notify \
          -H "Authorization: Bearer $LINE_TOKEN" \
          -F "message=$MESSAGE"

      # output2
      - uses: actions/upload-pages-artifact@v1
        with:
          path: ./output2

  # github-pagesをデプロイする
  deploy:
    needs: publish
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
