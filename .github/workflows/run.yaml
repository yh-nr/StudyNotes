name: Convert Markdown into PDF
on: [push]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Convert Markdown into PDF
        uses: KoharaKazuya/marp-cli-action@v2
        with:
          config-file: ./.marprc-ci.yml


      - name: Generate index.html
        run: |
          echo ${{ ls steps.publish.outputs.paths }}


      - name: Save outputs
        uses: actions/upload-artifact@v4
        with:
          name: marp_output
          path: ./output2



      - uses: actions/upload-pages-artifact@v1
        with:
          path: ./output2

      # - name: Generate URLs of published files
      #   id: generate_urls
      #   run: |
      #     # ディレクトリ内のすべてのファイルの相対パスを取得（サブディレクトリ含む）
      #     FILES=$(find ./output2 -type f -printf '%P\n')
      #     URLS=""
      #     for FILE in $FILES; do
      #       URL="${{ steps.deployment.outputs.page_url }}/$FILE"
      #       URLS="$URLS \n $URL"
      #     done
      #     echo "::set-output name=urls::$URLS"





  deploy:
    needs: publish
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      # - uses: snow-actions/line-notify@v1.1.0
      #   with:
      #     access_token: ${{ secrets.SECRET_LINE_NOTIFY_API_TOKEN }}
      #     message: "Published File URL: ${{ steps.deployment.outputs.page_url }}"

      # - name: Checkout gh-pages branch
      #   uses: actions/checkout@v4
      #   with:
      #     ref: 'gh-pages' # 特定のブランチを指定

      # - name: List files in output2 directory
      #   run: |
      #     echo "Listing files in output2 directory:"
      #     find output2 -type f # ファイルのみをリストアップ



      # - name: Checkout gh-pages branch
      #   uses: actions/checkout@v4
      #   with:
      #     ref: 'gh-pages' # 特定のブランチを指定



      # - name: Generate file URLs
      #   id: generate_file_urls
      #   run: |
      #     # GitHub PagesのデプロイメントURLを環境変数から取得
      #     PAGE_URL="${{ steps.deployment.outputs.page_url }}"
      #     # output2ディレクトリ内のすべてのファイルの相対パスを取得し、プレフィックスを追加

      #     FILES=$(find output2 -type f | sed 's|output2/||g' | while read file; do echo "${PAGE_URL}${file// /%20}"; done | tr '\n' '%' | sed 's/%/%0A/g')
      #     echo "FILES_WITH_URLS=$FILES" >> $GITHUB_ENV



      - name: Generate file URLs with CRLF
        id: generate_file_urls
        run: |
          # GitHub PagesのデプロイメントURLを環境変数から取得
          PAGE_URL="${{ steps.deployment.outputs.page_url }}"
          # output2ディレクトリ内のすべてのファイルの相対パスを取得し、プレフィックスを追加
          # 改行コードとして\r\nを使用
          # FILES=$(find output2 -type f | sed 's|output2/||g' | while read file; do echo "${PAGE_URL}${file// /%20} \n "; done | tr '\n' '%' )

          FILES=$(find output2 -type f | sed 's|output2/||g' | while read file; do echo "${PAGE_URL}${file// /%20} \n "; done | tr '\n' '%')
          echo "FILES_WITH_URLS=$(echo "$FILES" | sed 's/%/\n/g')" >> $GITHUB_ENV



      - name: Display URLs
        run: |
          echo "Generated URLs:"
          echo $FILES_WITH_URLS




      - name: Notify published URLs via LINE
        uses: snow-actions/line-notify@v1.1.0
        with:
          access_token: ${{ secrets.SECRET_LINE_NOTIFY_API_TOKEN }}
          message: "Published Files URLs: ${{ steps.generate_urls.outputs.urls }}"


      # - name: Encode file paths
      #   run: |
      #     FILES=$(find output2 -type f | sed 's|output2/||g' | base64)
      #     echo "FILES=$FILES" >> $GITHUB_ENV
      #   shell: /usr/bin/bash -e {0}

      # # - name: Store files list in FILES variable without 'output2/' prefix
      #   run: |
      #     FILES=$(find output2 -type f | sed 's|output2/||g')
      #     echo "FILES=$FILES" >> $GITHUB_ENV

      - name: Display FILES variable
        run: |
          echo "List of files in FILES variable:"
          echo $FILES



      - name: Notify via LINE
        env:
          LINE_TOKEN: ${{ secrets.SECRET_LINE_NOTIFY_API_TOKEN }} # LINE NotifyのアクセストークンをGitHub Secretsから取得
        run: |
          MESSAGE="Published Files URLs:\n$FILES_WITH_URLS"
          curl -X POST https://notify-api.line.me/api/notify \
          -H "Authorization: Bearer $LINE_TOKEN" \
          -F "message=$MESSAGE"
